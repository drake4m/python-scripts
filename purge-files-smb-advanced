import os
import time
import shutil
from concurrent.futures import ThreadPoolExecutor


# Define the path to the smb mount folder
smb_path = "/"
if os.path.exists(smb_path):
    disk_usage = shutil.disk_usage(smb_path)
    used = disk_usage.used
    total = disk_usage.total
    percent = (used / total) * 100
    print("Disk usage percentage: ", percent)
else:
    print("The directory does not exist.")
# Get the current time in seconds
now = time.time()

# Create lists to store deleted and error files
deleted_files = []
error_files = []


def process_file(file_path):
    try:
        # Get the last modified time of the file in seconds
        last_modified = os.path.getmtime(file_path)
        # Check if the file is older than one day
        if (now - last_modified) > 86400:
            # Delete the file
            os.remove(file_path)
            deleted_files.append(file_path)
    except Exception as e:
        error_files.append(file_path)
        print(f"Error deleting file {file_path}: {e}")

# Get the disk usage percentage
disk_usage_percent = (shutil.disk_usage(smb_path).used/shutil.disk_usage(smb_path).total)*100

# Check if the disk usage is above 90%
if disk_usage_percent > 90:
    # Recursively traverse the folder
    with ThreadPoolExecutor() as executor:
        for root, dirs, files in os.walk(smb_path):
            for file in files:
                file_path = os.path.join(root, file)
                executor.submit(process_file, file_path)
    # Get the new disk usage percentage
    disk_usage_percent = (shutil.disk_usage(smb_path).used/shutil.disk_usage(smb_path).total)*100

    # While the disk usage is above 60%
    while disk_usage_percent > 60:
        files_list = []
        # Recursively traverse the folder
        with ThreadPoolExecutor() as executor:
            for root, dirs, files in os.walk(smb_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    # Get the last modified time of the file in seconds
                    last_modified = os.path.getmtime(file_path)
                    files_list.append((file_path, last_modified))
            files_list.sort(key=lambda x: x[1])
            for file in files:
                executor.submit(process_file, file[0])
                # Get the new disk usage percentage
                disk_usage_percent = (shutil.disk_usage(smb_path).used/shutil.disk_usage(smb_path).total)*100
                # Exit the loop if the disk usage is below 60%
                if disk_usage_percent <= 60:
                    break

# Log the deleted files to the deleted_files.log file
with open("deleted_files.log", "w") as log_file:
    for file in deleted_files:
        log_file.write(file + "\n")

# Log the error files to the error_files.log file
with open("error_files.log", "w") as log_file:
    for file in error_files:
        log_file.write(file + "\n")
