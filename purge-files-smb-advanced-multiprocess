import os
import time
import shutil
from concurrent.futures import ProcessPoolExecutor
import logging

# Define the path to the smb mount folder
smb_path = "/"

# Define the threshold for disk usage
threshold = 90

# Configure logging
logging.basicConfig(filename='file_deletion.log', level=logging.INFO,
                    format='%(asctime)s %(levelname)s: %(message)s')

def process_file(file_path):
    try:
        # Delete the file
        os.remove(file_path)
        logging.info(f'Deleted file: {file_path}')
    except Exception as e:
        logging.error(f"Error deleting file {file_path}: {e}")

while True:
    # Get the current disk usage percentage
    disk_usage_percent = (shutil.disk_usage(smb_path).used / shutil.disk_usage(smb_path).total) * 100

    # Check if the disk usage is above the threshold
    if disk_usage_percent > threshold:
        files_list = []
        # Recursively traverse the folder
        for root, dirs, files in os.walk(smb_path):
            for file in files:
                file_path = os.path.join(root, file)
                # Get the last modified time of the file in seconds
                last_modified = os.path.getmtime(file_path)
                files_list.append((file_path, last_modified))
        files_list.sort(key=lambda x: x[1])
        with ProcessPoolExecutor() as executor:
            for file in files_list:
                executor.submit(process_file, file[0])
                disk_usage_percent = (shutil.disk_usage(smb_path).used / shutil.disk_usage(smb_path).total) * 100
                if disk_usage_percent <= threshold:
                    break

    time.sleep(60)  # sleep for 60 seconds before checking the disk usage again
