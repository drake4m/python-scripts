import os
import time
import shutil
from concurrent.futures import ThreadPoolExecutor
import daemon

def run_script(): # to be removed if you want to use it as a systemctl service
    # Define the path to the smb mount folder
    smb_path = "/path/to/smb/mount/folder"

    # Get the current time in seconds
    now = time.time()

    # Get the disk usage of the smb mount folder
    disk_usage = shutil.disk_usage(smb_path).percent

    # Create lists to store deleted and error files
    deleted_files = []
    error_files = []

    def process_file(file_path):
        try:
            # Get the last modified time of the file in seconds
            last_modified = os.path.getmtime(file_path)
            # Check if the file is older than one day
            if (now - last_modified) > 86400:
                # Delete the file
                os.remove(file_path)
                deleted_files.append(file_path)
        except Exception as e:
            error_files.append(file_path)
            print(f"Error deleting file {file_path}: {e}")

    # Check if the disk usage is above 90%
    if disk_usage > 90:
        # Recursively traverse the folder
        with ThreadPoolExecutor() as executor:
            for root, dirs, files in os.scandir(smb_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    executor.submit(process_file, file_path)
        # Get the new disk usage
        disk_usage = shutil.disk_usage(smb_path).percent
        # While the disk usage is above 60%
 while disk_usage > 60:
            files_list = []
            # Recursively traverse the folder
            with ThreadPoolExecutor() as executor:
                for root, dirs, files in os.scandir(smb_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        # Get the last modified time of the file in seconds
                        last_modified = os.path.getmtime(file_path)
                        files_list.append((file_path, last_modified))
                files_list.sort(key=lambda x: x[1])
                for file in files_list:
                    executor.submit(process_file, file[0])
                    # Get the new disk usage
                    disk_usage = shutil.disk_usage(smb_path).percent
                    # Exit the loop if the disk usage is below 60%
                    if disk_usage <= 60:
                        break
    else:
        # Recursively traverse the folder
        with ThreadPoolExecutor() as executor:
            for root, dirs, files in os.scandir(smb_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    executor.submit(process_file, file_path)

    # Log the deleted files to the deleted_files.log file
    with open("deleted_files.log", "w") as log_file:
        for file in deleted_files:
            log_file.write(file + "\n")

    # Log the error files to the error_files.log file
    with open("error_files.log", "w") as log_file:
        for file in error_files:
            log_file.write(file + "\n")

# Run the script as a daemon service, to be removed if you want to use it as a systemctl service
with daemon.DaemonContext():
    run_script()
